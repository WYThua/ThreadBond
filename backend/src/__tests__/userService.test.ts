import { PrismaClient } from '@prisma/client';
import { userService } from '../services/userService';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

describe('UserService', () => {
  beforeAll(async () => {
    // 测试前清理数据库
    await prisma.user.deleteMany({});
  });

  afterAll(async () => {
    // 测试后清理数据库
    await prisma.user.deleteMany({});
    await prisma.$disconnect();
  });

  describe('registerUser', () => {
    it('应该成功注册新用户并生成匿名身份', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'Test123!@#'
      };

      const result = await userService.registerUser(userData);

      expect(result).toHaveProperty('user');
      expect(result).toHaveProperty('token');
      expect(result).toHaveProperty('anonymousIdentity');
      
      expect(result.user.email).toBe(userData.email);
      expect(result.user.isActive).toBe(true);
      expect(typeof result.token).toBe('string');
      
      expect(result.anonymousIdentity).toHaveProperty('id');
      expect(result.anonymousIdentity).toHaveProperty('displayName');
      expect(result.anonymousIdentity).toHaveProperty('avatarUrl');

      // 验证数据库中的数据
      const dbUser = await prisma.user.findUnique({
        where: { email: userData.email },
        include: {
          anonymousIdentities: true,
          preferences: true
        }
      });

      expect(dbUser).toBeTruthy();
      expect(dbUser!.anonymousIdentities).toHaveLength(1);
      expect(dbUser!.preferences).toBeTruthy();
      
      // 验证密码已加密
      const isPasswordHashed = await bcrypt.compare(userData.password, dbUser!.passwordHash);
      expect(isPasswordHashed).toBe(true);
    });

    it('应该拒绝重复的邮箱', async () => {
      const userData = {
        email: 'test@example.com', // 已存在的邮箱
        password: 'Test123!@#'
      };

      await expect(userService.registerUser(userData)).rejects.toThrow('该邮箱已被注册');
    });
  });

  describe('authenticateUser', () => {
    beforeAll(async () => {
      // 创建测试用户
      await userService.registerUser({
        email: 'auth-test@example.com',
        password: 'Test123!@#'
      });
    });

    it('应该成功认证有效用户', async () => {
      const result = await userService.authenticateUser('auth-test@example.com', 'Test123!@#');

      expect(result).toHaveProperty('user');
      expect(result).toHaveProperty('token');
      expect(result).toHaveProperty('anonymousIdentity');
      expect(result.user.email).toBe('auth-test@example.com');
    });

    it('应该拒绝错误的密码', async () => {
      await expect(
        userService.authenticateUser('auth-test@example.com', 'WrongPassword')
      ).rejects.toThrow('密码错误');
    });

    it('应该拒绝不存在的用户', async () => {
      await expect(
        userService.authenticateUser('nonexistent@example.com', 'Test123!@#')
      ).rejects.toThrow('用户不存在或已被禁用');
    });
  });

  describe('generateAnonymousIdentity', () => {
    let testUserId: string;

    beforeAll(async () => {
      const user = await prisma.user.create({
        data: {
          email: 'identity-test@example.com',
          passwordHash: await bcrypt.hash('Test123!@#', 12)
        }
      });
      testUserId = user.id;
    });

    it('应该生成有效的匿名身份', async () => {
      const identity = await userService.generateAnonymousIdentity(testUserId);

      expect(identity).toHaveProperty('id');
      expect(identity).toHaveProperty('displayName');
      expect(identity).toHaveProperty('avatarUrl');
      expect(identity).toHaveProperty('personalityTraits');
      expect(identity.userId).toBe(testUserId);
      expect(identity.isAutoGenerated).toBe(true);

      // 验证昵称格式
      expect(identity.displayName).toMatch(/^.+\d+$/);
      
      // 验证头像URL格式
      expect(identity.avatarUrl).toMatch(/^https:\/\/api\.dicebear\.com/);
      
      // 验证个性特征
      expect(Array.isArray(identity.personalityTraits)).toBe(true);
      const traits = identity.personalityTraits as string[];
      expect(traits.length).toBeGreaterThanOrEqual(3);
      expect(traits.length).toBeLessThanOrEqual(5);
    });
  });

  describe('getUserById', () => {
    let testUserId: string;

    beforeAll(async () => {
      const result = await userService.registerUser({
        email: 'getuser-test@example.com',
        password: 'Test123!@#'
      });
      testUserId = result.user.id;
    });

    it('应该返回完整的用户信息', async () => {
      const user = await userService.getUserById(testUserId);

      expect(user).toHaveProperty('id');
      expect(user).toHaveProperty('email');
      expect(user).toHaveProperty('anonymousIdentities');
      expect(user).toHaveProperty('preferences');
      expect(user.anonymousIdentities).toHaveLength(1);
      expect(user.preferences).toBeTruthy();
    });

    it('应该拒绝不存在的用户ID', async () => {
      await expect(
        userService.getUserById('nonexistent-id')
      ).rejects.toThrow('用户不存在');
    });
  });
});