// Prisma 数据库模式定义
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型 - 仅存储基本认证信息
model User {
  id           String    @id @default(cuid())
  email        String    @unique // 仅用于验证，不存储其他可识别信息
  passwordHash String    @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")
  lastActiveAt DateTime? @map("last_active_at")
  isActive     Boolean   @default(true) @map("is_active")

  // 关联匿名身份
  anonymousIdentities AnonymousIdentity[]
  
  // 用户偏好设置
  preferences UserPreferences?

  // 安全相关
  securityReports SecurityReport[] @relation("ReportedUser")
  reportsMade     SecurityReport[] @relation("ReportingUser")
  dataExports     UserDataExport[]

  @@map("users")
}

// 匿名身份模型 - 用于社交互动
model AnonymousIdentity {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  displayName       String   @map("display_name")
  avatarUrl         String?  @map("avatar_url")
  personalityTraits Json?    @map("personality_traits") // 存储个性特征数组
  createdAt         DateTime @default(now()) @map("created_at")
  isAutoGenerated   Boolean  @default(true) @map("is_auto_generated")

  // 关联用户
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 创建的线索
  clues Clue[]

  // 解密尝试
  decryptionAttempts DecryptionAttempt[]

  // 聊天参与
  chatRoomsAsParticipant1 ChatRoom[] @relation("Participant1")
  chatRoomsAsParticipant2 ChatRoom[] @relation("Participant2")
  
  // 发送的消息
  messages Message[]

  @@map("anonymous_identities")
}

// 用户偏好设置
model UserPreferences {
  id                     String @id @default(cuid())
  userId                 String @unique @map("user_id")
  clueTypes              Json?  @map("clue_types") // 偏好的线索类型数组
  difficultyLevel        String @default("MEDIUM") @map("difficulty_level") // EASY, MEDIUM, HARD
  notificationSettings   Json?  @map("notification_settings")
  privacySettings        Json?  @map("privacy_settings")
  dataRetentionSettings  Json?  @map("data_retention_settings")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// 线索模型
model Clue {
  id                     String    @id @default(cuid())
  creatorId              String    @map("creator_id")
  title                  String
  content                Json      // 存储 ClueContent 结构
  type                   String    // TEXT, IMAGE, AUDIO, VIDEO
  difficulty             String    @default("MEDIUM") // EASY, MEDIUM, HARD
  solution               String    // 加密存储的答案
  hints                  Json?     // 提示数组
  createdAt              DateTime  @default(now()) @map("created_at")
  expiresAt              DateTime? @map("expires_at")
  isActive               Boolean   @default(true) @map("is_active")
  decryptionCount        Int       @default(0) @map("decryption_count")
  successfulDecryptions  Int       @default(0) @map("successful_decryptions")
  tags                   Json?     // 标签数组
  aiGenerated            Boolean   @default(false) @map("ai_generated")

  // 关联创建者
  creator AnonymousIdentity @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  // 解密尝试
  decryptionAttempts DecryptionAttempt[]

  // 触发的聊天房间
  chatRooms ChatRoom[]

  @@map("clues")
}

// 解密尝试记录
model DecryptionAttempt {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  clueId          String    @map("clue_id")
  answer          String
  isCorrect       Boolean   @map("is_correct")
  attemptedAt     DateTime  @default(now()) @map("attempted_at")
  hintsUsed       Int       @default(0) @map("hints_used")
  attemptNumber   Int       @map("attempt_number")
  chatRoomCreated String?   @map("chat_room_created")

  // 关联
  user AnonymousIdentity @relation(fields: [userId], references: [id], onDelete: Cascade)
  clue Clue              @relation(fields: [clueId], references: [id], onDelete: Cascade)

  @@map("decryption_attempts")
}

// 聊天房间模型
model ChatRoom {
  id               String    @id @default(cuid())
  participant1Id   String    @map("participant1_id")
  participant2Id   String    @map("participant2_id")
  clueId           String    @map("clue_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  lastMessageAt    DateTime? @map("last_message_at")
  isActive         Boolean   @default(true) @map("is_active")
  identityRevealed Boolean   @default(false) @map("identity_revealed")
  identityRevealedBy Json?   @map("identity_revealed_by") // 用户ID数组
  endedBy          String?   @map("ended_by")
  endedAt          DateTime? @map("ended_at")
  autoCreated      Boolean   @default(true) @map("auto_created")

  // 关联
  participant1 AnonymousIdentity @relation("Participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2 AnonymousIdentity @relation("Participant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  clue         Clue              @relation(fields: [clueId], references: [id], onDelete: Cascade)

  // 消息
  messages Message[]

  @@map("chat_rooms")
}

// 消息模型
model Message {
  id              String    @id @default(cuid())
  roomId          String    @map("room_id")
  senderId        String    @map("sender_id")
  content         Json      // 存储 MessageContent 结构
  type            String    // TEXT, IMAGE, AUDIO, EMOJI, SYSTEM
  sentAt          DateTime  @default(now()) @map("sent_at")
  isEncrypted     Boolean   @default(false) @map("is_encrypted")
  readAt          DateTime? @map("read_at")
  sentimentScore  Float?    @map("sentiment_score")
  isSystemMessage Boolean   @default(false) @map("is_system_message")

  // 关联
  room   ChatRoom          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender AnonymousIdentity @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// 安全举报模型
model SecurityReport {
  id          String    @id @default(cuid())
  reporterId  String    @map("reporter_id")
  reportedId  String    @map("reported_id")
  reportType  String    @map("report_type") // INAPPROPRIATE_CONTENT, HARASSMENT, SPAM, OTHER
  targetId    String    @map("target_id") // 被举报对象的ID（消息、线索等）
  reason      String
  description String?
  reportedAt  DateTime  @default(now()) @map("reported_at")
  status      String    @default("PENDING") @map("status") // PENDING, REVIEWED, RESOLVED, DISMISSED
  reviewedBy  String?   @map("reviewed_by")
  reviewedAt  DateTime? @map("reviewed_at")

  // 关联
  reporter User @relation("ReportingUser", fields: [reporterId], references: [id], onDelete: Cascade)
  reported User @relation("ReportedUser", fields: [reportedId], references: [id], onDelete: Cascade)

  @@map("security_reports")
}

// 用户数据导出记录
model UserDataExport {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  requestedAt DateTime  @default(now()) @map("requested_at")
  exportType  String    @map("export_type") // FULL, CHAT_HISTORY, CLUES_ONLY
  status      String    @default("PENDING") @map("status") // PENDING, PROCESSING, COMPLETED, FAILED
  downloadUrl String?   @map("download_url")
  expiresAt   DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_data_exports")
}