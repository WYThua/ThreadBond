import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('开始数据库种子数据初始化...');

  // 创建测试用户
  const hashedPassword = await bcrypt.hash('test123456', 12);
  
  const testUser = await prisma.user.create({
    data: {
      email: 'test@threadbond.com',
      passwordHash: hashedPassword,
      preferences: {
        create: {
          clueTypes: ['TEXT', 'IMAGE'],
          difficultyLevel: 'MEDIUM',
          notificationSettings: {
            chatNotifications: true,
            clueNotifications: true,
            emailNotifications: false
          },
          privacySettings: {
            showOnlineStatus: false,
            allowDirectMessages: true
          },
          dataRetentionSettings: {
            chatHistoryRetentionDays: 30,
            clueRetentionDays: 90,
            autoDeleteEnabled: true
          }
        }
      },
      anonymousIdentities: {
        create: {
          displayName: '神秘探索者',
          avatarUrl: '/avatars/default-1.png',
          personalityTraits: ['好奇', '友善', '智慧'],
          isAutoGenerated: true
        }
      }
    },
    include: {
      anonymousIdentities: true,
      preferences: true
    }
  });

  console.log('测试用户创建成功:', testUser.email);

  // 创建示例线索
  const anonymousIdentity = testUser.anonymousIdentities[0];
  
  const sampleClue = await prisma.clue.create({
    data: {
      creatorId: anonymousIdentity.id,
      title: '城市中的秘密花园',
      content: {
        text: '在钢筋水泥的丛林中，有一处被遗忘的绿洲。它藏在两栋高楼之间，只有在特定的时间，阳光才能洒进这个小小的世界...',
        imageUrl: null,
        audioUrl: null,
        interactiveElements: []
      },
      type: 'TEXT',
      difficulty: 'MEDIUM',
      solution: '天台花园',
      hints: [
        '抬头看看',
        '阳光的角度很重要',
        '在城市的制高点'
      ],
      tags: ['城市', '自然', '秘密'],
      aiGenerated: false
    }
  });

  console.log('示例线索创建成功:', sampleClue.title);

  console.log('数据库种子数据初始化完成！');
}

main()
  .catch((e) => {
    console.error('种子数据初始化失败:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });