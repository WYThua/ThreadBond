// 用户信息状态管理
const state = {
  // 用户基本信息
  userInfo: JSON.parse(localStorage.getItem('threadbond-user') || 'null'),
  
  // 匿名身份列表
  anonymousIdentities: [],
  
  // 当前使用的匿名身份
  currentAnonymousIdentity: null,
  
  // 用户偏好设置
  preferences: {
    clueTypes: ['TEXT', 'IMAGE'],
    difficultyLevel: 'MEDIUM',
    notificationSettings: {
      chatNotifications: true,
      clueNotifications: true,
      emailNotifications: false
    },
    privacySettings: {
      showOnlineStatus: false,
      allowDirectMessages: true
    },
    dataRetentionSettings: {
      chatHistoryRetentionDays: 30,
      clueRetentionDays: 90,
      autoDeleteEnabled: true
    }
  },
  
  // 加载状态
  loading: false,
  
  // 更新状态
  updating: false
};

const mutations = {
  // 设置用户信息
  SET_USER_INFO(state, userInfo) {
    state.userInfo = userInfo;
    if (userInfo) {
      localStorage.setItem('threadbond-user', JSON.stringify(userInfo));
    } else {
      localStorage.removeItem('threadbond-user');
    }
  },
  
  // 设置匿名身份列表
  SET_ANONYMOUS_IDENTITIES(state, identities) {
    state.anonymousIdentities = identities;
    
    // 如果没有当前匿名身份，设置第一个为当前身份
    if (identities.length > 0 && !state.currentAnonymousIdentity) {
      state.currentAnonymousIdentity = identities[0];
    }
  },
  
  // 设置当前匿名身份
  SET_CURRENT_ANONYMOUS_IDENTITY(state, identity) {
    state.currentAnonymousIdentity = identity;
  },
  
  // 添加匿名身份
  ADD_ANONYMOUS_IDENTITY(state, identity) {
    state.anonymousIdentities.push(identity);
  },
  
  // 更新匿名身份
  UPDATE_ANONYMOUS_IDENTITY(state, { id, updates }) {
    const index = state.anonymousIdentities.findIndex(identity => identity.id === id);
    if (index !== -1) {
      state.anonymousIdentities.splice(index, 1, {
        ...state.anonymousIdentities[index],
        ...updates
      });
      
      // 如果更新的是当前身份，也要更新当前身份
      if (state.currentAnonymousIdentity && state.currentAnonymousIdentity.id === id) {
        state.currentAnonymousIdentity = {
          ...state.currentAnonymousIdentity,
          ...updates
        };
      }
    }
  },
  
  // 设置用户偏好
  SET_PREFERENCES(state, preferences) {
    state.preferences = { ...state.preferences, ...preferences };
  },
  
  // 设置加载状态
  SET_LOADING(state, loading) {
    state.loading = loading;
  },
  
  // 设置更新状态
  SET_UPDATING(state, updating) {
    state.updating = updating;
  },
  
  // 清除用户信息
  CLEAR_USER_INFO(state) {
    state.userInfo = null;
    state.anonymousIdentities = [];
    state.currentAnonymousIdentity = null;
    localStorage.removeItem('threadbond-user');
  }
};

const actions = {
  // 获取用户信息
  async fetchUserInfo({ commit }) {
    commit('SET_LOADING', true);
    
    try {
      // 这里应该调用获取用户信息的 API
      // const response = await api.getUserInfo();
      // 
      // if (response.success) {
      //   commit('SET_USER_INFO', response.data.user);
      //   commit('SET_ANONYMOUS_IDENTITIES', response.data.anonymousIdentities);
      //   commit('SET_PREFERENCES', response.data.preferences);
      //   return { success: true };
      // } else {
      //   return { success: false, message: response.message };
      // }
      
      // 暂时使用模拟数据
      const mockUserInfo = {
        id: 'user-' + Date.now(),
        email: 'test@threadbond.com',
        createdAt: new Date().toISOString(),
        lastActiveAt: new Date().toISOString(),
        isActive: true
      };
      
      const mockAnonymousIdentities = [
        {
          id: 'anonymous-' + Date.now(),
          displayName: '神秘探索者',
          avatarUrl: '/avatars/default-1.png',
          personalityTraits: ['好奇', '友善', '智慧'],
          isAutoGenerated: true,
          createdAt: new Date().toISOString()
        }
      ];
      
      commit('SET_USER_INFO', mockUserInfo);
      commit('SET_ANONYMOUS_IDENTITIES', mockAnonymousIdentities);
      
      return { success: true };
      
    } catch (error) {
      console.error('获取用户信息失败:', error);
      return { success: false, message: error.message || '获取用户信息失败' };
    } finally {
      commit('SET_LOADING', false);
    }
  },
  
  // 更新用户偏好
  async updatePreferences({ commit }, preferences) {
    commit('SET_UPDATING', true);
    
    try {
      // 这里应该调用更新偏好的 API
      // const response = await api.updatePreferences(preferences);
      // 
      // if (response.success) {
      //   commit('SET_PREFERENCES', preferences);
      //   return { success: true, message: '偏好设置已更新' };
      // } else {
      //   return { success: false, message: response.message };
      // }
      
      // 暂时模拟更新成功
      commit('SET_PREFERENCES', preferences);
      return { success: true, message: '偏好设置已更新' };
      
    } catch (error) {
      console.error('更新偏好失败:', error);
      return { success: false, message: error.message || '更新偏好失败' };
    } finally {
      commit('SET_UPDATING', false);
    }
  },
  
  // 生成新的匿名身份
  async generateAnonymousIdentity({ commit }) {
    try {
      // 这里应该调用生成匿名身份的 API
      // const response = await api.generateAnonymousIdentity();
      // 
      // if (response.success) {
      //   commit('ADD_ANONYMOUS_IDENTITY', response.data);
      //   return { success: true, data: response.data };
      // } else {
      //   return { success: false, message: response.message };
      // }
      
      // 暂时模拟生成新身份
      const newIdentity = {
        id: 'anonymous-' + Date.now(),
        displayName: '神秘旅行者',
        avatarUrl: '/avatars/default-2.png',
        personalityTraits: ['冒险', '幽默', '创意'],
        isAutoGenerated: true,
        createdAt: new Date().toISOString()
      };
      
      commit('ADD_ANONYMOUS_IDENTITY', newIdentity);
      return { success: true, data: newIdentity };
      
    } catch (error) {
      console.error('生成匿名身份失败:', error);
      return { success: false, message: error.message || '生成匿名身份失败' };
    }
  },
  
  // 切换匿名身份
  switchAnonymousIdentity({ commit }, identity) {
    commit('SET_CURRENT_ANONYMOUS_IDENTITY', identity);
    return { success: true, message: '已切换身份' };
  },
  
  // 更新匿名身份
  async updateAnonymousIdentity({ commit }, { id, updates }) {
    try {
      // 这里应该调用更新匿名身份的 API
      // const response = await api.updateAnonymousIdentity(id, updates);
      // 
      // if (response.success) {
      //   commit('UPDATE_ANONYMOUS_IDENTITY', { id, updates });
      //   return { success: true, message: '身份信息已更新' };
      // } else {
      //   return { success: false, message: response.message };
      // }
      
      // 暂时模拟更新成功
      commit('UPDATE_ANONYMOUS_IDENTITY', { id, updates });
      return { success: true, message: '身份信息已更新' };
      
    } catch (error) {
      console.error('更新匿名身份失败:', error);
      return { success: false, message: error.message || '更新匿名身份失败' };
    }
  }
};

const getters = {
  // 获取用户信息
  userInfo: state => state.userInfo,
  
  // 获取匿名身份列表
  anonymousIdentities: state => state.anonymousIdentities,
  
  // 获取当前匿名身份
  currentAnonymousIdentity: state => state.currentAnonymousIdentity,
  
  // 获取用户偏好
  preferences: state => state.preferences,
  
  // 是否正在加载
  isLoading: state => state.loading,
  
  // 是否正在更新
  isUpdating: state => state.updating,
  
  // 是否有用户信息
  hasUserInfo: state => !!state.userInfo
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};